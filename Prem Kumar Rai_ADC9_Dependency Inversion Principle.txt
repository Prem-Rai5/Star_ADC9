                              Dependency Inversion Principle (DIP)


The Dependency Inversion Principle (DIP) encourages us to write code that depends
upon abstractions rather than upon concrete details. 
According to this, dependency inversion principle, entities should depend only on 
abstractions but not on concretions.

According to Dependency Inversion Principle, high-level module must never rely on any low-level module but 
should depend on abstractions.For example, you go to a local store to buy something,
and you decide to pay for it by using your debit card. So, when you give your card 
to the clerk for making the payment, the clerk doesnâ€™t bother to check what kind of
card you have given Even if you have given a Visa card, he will not put out a Visa 
machine for swiping your card. The type of credit card or debit card that you have 
for paying does not even matter; they will simply swipe it. So, in this example, you 
can see that both you and the clerk are dependent on the credit card abstraction and
you are not worried about the specifics of the card. This is what a dependency inversion
principle is.
High level modules should not depend upon low level modules. Rather, both
should depend upon abstractions.
